#!/bin/bash
#
#

# A collection of Linux perf tools by Brendan Gregg:
# http://techblog.netflix.com/2015/11/linux-performance-analysis-in-60s.html
perf-tools() {
  local reset="$(tput sgr0)"
  local bold="$(tput bold)"

  echo "Linux Performance Analysis in 60,000 Milliseconds
Source: http://techblog.netflix.com/2015/11/linux-performance-analysis-in-60s.html
Even more tools: http://techblog.netflix.com/2015/08/netflix-at-velocity-2015-linux.html

 1) ${bold}uptime${reset}              Load averages, indicate the number of tasks (processes) wanting to run (CPU and I/O).
 2) ${bold}dmesg | tail${reset}        Last 10 system messages (if there are any).
 3) ${bold}vmstat 1${reset}            Virtual memory stat, 1 second summaries. CPU stats are on average, across all CPUs:
                          - r          Number of processes running on CPU and waiting for a turn (CPU only, no I/O). Value > cores = saturation
                          - free       Free memory in kilobytes; see (7) for more info on free mem
                          - si/so      Swap-ins and swap-outs; if these are non-zero, you're out of memory
                          - us         User time
                          - sy         System time (kernel), necessary for I/O processing
                          - id         Idle
                          - wa         Wait I/O (like idle for I/O reason), constant value points to a disk bottleneck
                          - st         Stolen time
 4) ${bold}mpstat -P ALL 1${reset}     CPU time breakdowns per CPU, allows to check for an imbalance (a single hot CPU can be evidence of a single-threaded application).
 5) ${bold}pidstat 1${reset}           Per-process summary, useful for watching patterns over time. CPU column is the total across all CPUs (cores).
 6) ${bold}iostat -xz 1${reset}        Workload and performance of block devices:
                          - r/s        Reads per second
                          - w/s        Writes per second
                          - rkB/s      Read Kbytes per second
                          - wkB/s      Write Kbytes per second
                          - await      The average time for the I/O in milliseconds (time the application suffers, as it includes both time queued and time being serviced)
                          - avgqu-sz   The average number of requests issued to the device; values greater than 1 can be evidence of saturation
                          - %util      Device utilization during internal (1 second in this case)
 7) ${bold}free -m${reset}             Memory stats in Mbytes. Cached memory can be reclaimed quickly if apps need it, so it should be considered free (-/+ buffers/cache line). Also buffers and cached shouldn't be near-zero in size.
 8) ${bold}sar -n DEV 1${reset}        Network interface throughput:
                          - rxkB/s     Received Kbytes per second (x8 for Kbits)
                          - txkB/s     Transmitted Kbytes per second (x8 for Kbits)
                          - %ifutil    Device utilization (max of both directions for full duplex)
 9) ${bold}sar -n TCP,ETCP 1${reset}   Summarized view of some key TCP metrics:
                          - active/s   Number of locally-initiated TCP connections per second
                          - passive/s  Number of remotely-initiated TCP connections per second
                          - retrans/s  Number of TCP retransmits per second (sign of a network or server issue)
10) ${bold}top/htop${reset}            Non-rolling system overview (which makes it hard to see patterns over time). Pro-tip: Ctrl-S to pause, Ctrl-Q to continue."
}

# Start screen and source sshrc bash
screenrc() {
  local SCREENDIR=/tmp/screen-ssh-home
  if ! [ -d $SCREENDIR ]; then
    rm -rf $SCREENDIR
    mkdir -p $SCREENDIR
  fi
  rm -rf $SCREENDIR/.sshrc.d
  cp -r $SSHHOME/.sshrc $SSHHOME/bashsshrc $SSHHOME/sshrc $SSHHOME/.sshrc.d $SCREENDIR
  SSHHOME=$SCREENDIR screen -c $SCREENDIR/.sshrc.d/.screenrc -s $SCREENDIR/bashsshrc $@
}

# Start tmux and source sshrc bash
tmuxrc() {
  local TMUXDIR=/tmp/tmux-ssh-home
  if ! [ -d $TMUXDIR ]; then
    rm -rf $TMUXDIR
    mkdir -p $TMUXDIR
  fi
  rm -rf $TMUXDIR/.sshrc.d
  cp -r $SSHHOME/.sshrc $SSHHOME/bashsshrc $SSHHOME/sshrc $SSHHOME/.sshrc.d $TMUXDIR
  SSHHOME=$TMUXDIR SHELL=$TMUXDIR/bashsshrc tmux -f $TMUXDIR/.sshrc.d/.tmux.conf $@
}

# Create or attach a screenrc session
screenrc-create-or-attach-session() {
  screenrc -xRR
}

# Create or attach a tmuxrc session
tmuxrc-create-or-attach-session() {
  local TMUX_SESSION_NAME="auto"

  if tmux has-session -t $TMUX_SESSION_NAME >/dev/null 2>&1; then
    tmuxrc -2CC attach-session -t $TMUX_SESSION_NAME
  else
    tmuxrc -2CC new-session -s $TMUX_SESSION_NAME
  fi
}

# Set tmux window title
tmux-title() {
  tmux rename-window $@
}
